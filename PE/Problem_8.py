'''
The four adjacent digits in the 1000-digit number that have the greatest product
 are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that 
have the greatest product. What is the value of this product?
'''


s1='73167176531330624919225119674426574742355349194934'
s2='96983520312774506326239578318016984801869478851843'
s3='85861560789112949495459501737958331952853208805511'
s4='12540698747158523863050715693290963295227443043557'
s5='66896648950445244523161731856403098711121722383113'
s6='62229893423380308135336276614282806444486645238749'
s7='30358907296290491560440772390713810515859307960866'
s8='70172427121883998797908792274921901699720888093776'
s9='65727333001053367881220235421809751254540594752243'
s10='52584907711670556013604839586446706324415722155397'
s11='53697817977846174064955149290862569321978468622482'
s12='83972241375657056057490261407972968652414535100474'
s13='82166370484403199890008895243450658541227588666881'
s14='16427171479924442928230863465674813919123162824586'
s15='17866458359124566529476545682848912883142607690042'
s16='24219022671055626321111109370544217506941658960408'
s17='07198403850962455444362981230987879927244284909188'
s18='84580156166097919133875499200524063689912560717606'
s19='05886116467109405077541002256983155200055935729725'
s20='71636269561882670428252483600823257530420752963450'




from tictoc import tic,toc

w=s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16+s17+s18+s19+s20

def maximunProduct13(s):
    maximun_product = 0
    x=1
    for i in range(0,988): # 988 = 1001-13
        x = int(s[i])*int(s[i+1])*int(s[i+2])*int(s[i+3])*int(s[i+4])*int(s[i+5])*int(s[i+6])*int(s[i+7])*int(s[i+8])*int(s[i+9])*int(s[i+10])*int(s[i+11])*int(s[i+12])
        if(maximun_product < x):
            maximun_product = x  
    return maximun_product

tic()
print(maximunProduct13(w))
toc()



